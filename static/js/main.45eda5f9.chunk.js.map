{"version":3,"sources":["components/Head.js","components/ItemC.js","components/Details.js","components/GridC.js","App.js","serviceWorker.js","index.js"],"names":["Head","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","id","src","alt","Component","ItemC","Grid_default","item","data","sprite","name","onClick","click","Details","console","log","types","type","map","el","key","exp","height","weight","GridC","entryNos","pokeInfo","pokeFull","handleClick","event","preventDefault","parseInt","target","yes","setState","_this2","axios","get","then","res","allAmount","pokemon_entries","length","pokeArrs","all","checkArrs","arr","_this3","push","entry_number","entries","concat","poke","species","base_experience","sprites","front_default","full","rend","rows","_this4","len","chosen","info","container","justify","spacing","components_Details","components_ItemC","App","components_Head","components_GridC","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45eda5f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Head extends Component { \n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {};\n\n    }\n\n    render() {\n\n        return(   \n\n            <h1 className='center'>Pokedex  <img id='pokeball' src='https://upload.wikimedia.org/wikipedia/en/3/39/Pokeball.PNG' alt='pokeball'></img></h1>\n            \n        )\n\n    }\n\n}\n\nexport default Head;","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nclass ItemC extends Component { \n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {};\n\n    }\n\n    render() {\n\n        return(\n\n            <Grid item><img id={this.props.id} src={this.props.data.sprite} alt={this.props.data.name} onClick={this.props.click}></img></Grid>\n    \n        )\n\n    }\n\n}\n\nexport default ItemC;","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nclass Details extends Component { \n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {};\n\n    }\n\n    render() {\n\n        console.log(this.props);\n\n        let types = this.props.data.type.map((el,key)=>{\n\n            return el + ' ';\n\n        });\n\n        return(\n\n            <Grid item className='center'>\n                <h3 className='upper'>{this.props.data.name}</h3>\n                <img id='resize' src={this.props.data.sprite} alt={this.props.data.name}></img>\n                <p className='upper'>Type(s): {types}</p>\n                <p>Experience: {this.props.data.exp}</p>\n                <p>Height: {this.props.data.height}</p>\n                <p>Weight: {this.props.data.weight}</p>\n\n                <button id='close' onClick={this.props.click} className=\"btn\">\n                        Close \n                </button>\n            \n            </Grid>\n    \n        )\n\n    }\n\n}\n\nexport default Details;","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport ItemC from './ItemC';\nimport Details from './Details';\nimport axios from 'axios';\n\nclass GridC extends Component { \n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {};\n\n    }\n\n    entryNos = [];\n\n    pokeInfo = [];\n\n    pokeFull = [];\n\n    componentDidMount(){\n\n        //initial get request for all pokedex info when component mounts\n        axios.get('https://pokeapi.co/api/v2/pokedex/1/').then((res)=>{\n\n            //save info in state\n\n            let allAmount = res.data.pokemon_entries.length;\n\n            this.setState({pokeArrs: res.data.pokemon_entries, all: allAmount});\n\n            //run check arrs method to extract id from each pokemon and use it to get back poke info\n            this.checkArrs(this.state.pokeArrs);\n        });\n\n    }\n\n    checkArrs(arr){\n\n        //map through and build new array with ids\n        arr.map(el=>{\n\n            this.entryNos.push(el.entry_number);\n\n        });\n\n        //set id array in state when done looping then loop through ids to perform multiple get requests for specific poke info\n        this.setState({entries: this.entryNos}, ()=>{\n\n            this.state.entries.map(el=>{\n\n                axios.get(`https://pokeapi.co/api/v2/pokemon/${el}`).then((res)=>{\n\n                    let poke = {};\n\n                    poke.id = res.data.id;\n\n                    poke.name = res.data.species.name;\n\n                    poke.exp = res.data.base_experience;\n\n                    poke.sprite = res.data.sprites.front_default\n\n                    poke.type = res.data.types.map(el=>el.type.name);\n\n                    poke.height = res.data.height;\n\n                    poke.weight = res.data.weight;\n    \n                    this.pokeFull.push(poke);\n\n                    this.setState({full: this.pokeFull});\n\n                });\n    \n            });\n\n        });\n\n    }\n\n    handleClick = event => {\n\n        event.preventDefault();\n    \n        let click = parseInt(event.target.id);\n\n        console.log(click);\n\n        if (click === 'closed') {\n\n            delete this.state.yes;\n\n            this.setState(this.state);\n\n        } else {\n\n            this.setState({yes: click});\n\n        }\n        \n    };\n\n    render() {\n\n        let rend;\n\n        let rows;\n\n        if (this.state.all) {\n\n            let len = this.state.all;\n\n            if (this.state.full) {\n\n                if(this.state.full.length === len) {\n\n                    if (this.state.yes) {\n\n                        let chosen = this.state.yes;\n\n                        let info = this.state.full[chosen];\n\n                        rend = <Grid container justify={'center'} spacing={24}>\n                                <Details data={info} click={this.handleClick}/>\n                            </Grid>\n\n                    } else {\n\n                        rows = this.state.full.map((el, key)=>{\n\n                            return <ItemC data={el} click={this.handleClick} id={key}/>\n    \n                        });\n    \n                        rend = <Grid container justify={'center'} spacing={24}>\n        \n                                {rows}\n    \n                            </Grid>\n\n                    }\n\n                }\n\n            }\n\n        } else {\n\n            rend = <h2 className='center'>loading</h2>;\n\n        }\n\n        return(\n\n            <div>\n\n                {rend}\n        \n            </div>\n\n        )\n\n    }\n\n}\n\nexport default GridC;","import React, { Component } from 'react';\nimport './App.css';\nimport Head from './components/Head';\nimport GridC from './components/GridC';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Head />\n        <GridC />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}